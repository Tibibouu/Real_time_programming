OIL_VERSION = "2.5";

IMPLEMENTATION trampoline {

    /* This fix the default STACKSIZE of tasks */
    TASK {
        UINT32 STACKSIZE = 300 ;
    };

    /* This fix the default STACKSIZE of ISRs */
    ISR {
        UINT32 STACKSIZE = 200 ;
    };

    OS {
      BOOLEAN [
        TRUE {
          ENUM [
            stm32
          ] LIBRARY[];
        },
        FALSE
      ] BUILD = FALSE;
    };
};

CPU tpUS {
   LIBRARY stm32 {
    PATH = "cortex/armv7em/stm32f407/STM32F4xx_StdPeriph_Driver";
    CHEADER = "stm32f4xx_adc.h";
    CFILE = "stm32f4xx_adc.c";
    CHEADER = "stm32f4xx_dma.h";
    CFILE = "stm32f4xx_dma.c";
    CHEADER = "stm32f4xx_i2c.h";
    CFILE = "stm32f4xx_i2c.c";
    CHEADER = "stm32f4xx_spi.h";
    CFILE = "stm32f4xx_spi.c";
    CHEADER = "stm32f4xx_usart.h";
    CFILE = "stm32f4xx_usart.c";
  };

  OS config {
    STATUS = EXTENDED;
    PRETASKHOOK = TRUE;
    POSTTASKHOOK = TRUE;
    PAINT_STACK = TRUE;
    PAINT_REGISTERS = TRUE;
    
    BUILD = TRUE {
      TRAMPOLINE_BASE_PATH = "/home/thibault/Documents/SE/S9/OS_pour_l_embarque/outils/trampoline";
      //LCD related files
      APP_SRC = "lcd/tm_stm32f4_dma.c";
      APP_SRC = "lcd/tm_stm32f4_fonts.c";
      APP_SRC = "lcd/tm_stm32f4_gpio.c";
      APP_SRC = "lcd/tm_stm32f4_ili9341.c";
      APP_SRC = "lcd/tm_stm32f4_spi_dma.c";
      APP_SRC = "lcd/tm_stm32f4_sdram.c";
      APP_SRC = "lcd/tm_stm32f4_spi.c";
      APP_SRC = "lcd/lcd.c";
      //capteur us
      APP_SRC = "sr04/sr04.c";
      //application files.
      APP_SRC = "tpUS.c";

      APP_NAME = "tp_exe";
      CFLAGS  = "-O0"; 
      LDFLAGS = "-Map=tp.map";
      COMPILER = "arm-none-eabi-gcc";
      ASSEMBLER = "arm-none-eabi-as";
      LINKER = "arm-none-eabi-ld";
      COPIER = "arm-none-eabi-objcopy";
      SYSTEM = PYTHON;

      LIBRARY = gpt;
      LIBRARY = stm32;
    };
    SYSTEM_CALL = TRUE;
    MEMMAP = TRUE {
      COMPILER = gcc;
      LINKER = gnu_ld { SCRIPT = "script.ld"; };
      ASSEMBLER = gnu_as;
      MEMORY_PROTECTION = FALSE;
    };
  };
  
  APPMODE std {};
  
  TASK taskTime {
    PRIORITY = 1;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };
  
  ALARM alTime {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
      TASK = taskTime;
    };
    AUTOSTART = TRUE {
      APPMODE = std;
      ALARMTIME = 1000;
      CYCLETIME = 1000;
    };
  };

};


OIL_VERSION = "2.5";

IMPLEMENTATION trampoline {

    /* This fix the default STACKSIZE of tasks */
    TASK {
        UINT32 STACKSIZE = 300 ;
    };

    /* This fix the default STACKSIZE of ISRs */
    ISR {
        UINT32 STACKSIZE = 200 ;
    };

    OS {
      BOOLEAN [
        TRUE {
          ENUM [
            stm32
          ] LIBRARY[];
        },
        FALSE
      ] BUILD = FALSE;
    };
};

CPU tpUS_COM {
   LIBRARY stm32 {
    PATH = "cortex/armv7em/stm32f407/STM32F4xx_StdPeriph_Driver";
    CHEADER = "stm32f4xx_adc.h";
    CFILE = "stm32f4xx_adc.c";
    CHEADER = "stm32f4xx_dma.h";
    CFILE = "stm32f4xx_dma.c";
    CHEADER = "stm32f4xx_i2c.h";
    CFILE = "stm32f4xx_i2c.c";
    CHEADER = "stm32f4xx_spi.h";
    CFILE = "stm32f4xx_spi.c";
    CHEADER = "stm32f4xx_usart.h";
    CFILE = "stm32f4xx_usart.c";
  };

  OS config {
    STATUS = EXTENDED;
    PRETASKHOOK = TRUE;
    POSTTASKHOOK = TRUE;
    PAINT_STACK = TRUE;
    PAINT_REGISTERS = TRUE;
    
    BUILD = TRUE {
      TRAMPOLINE_BASE_PATH = "/home/thibault/Documents/SE/S9/OS_pour_l_embarque/outils/trampoline";
      //LCD related files
      APP_SRC = "lcd/tm_stm32f4_dma.c";
      APP_SRC = "lcd/tm_stm32f4_fonts.c";
      APP_SRC = "lcd/tm_stm32f4_gpio.c";
      APP_SRC = "lcd/tm_stm32f4_ili9341.c";
      APP_SRC = "lcd/tm_stm32f4_spi_dma.c";
      APP_SRC = "lcd/tm_stm32f4_sdram.c";
      APP_SRC = "lcd/tm_stm32f4_spi.c";
      APP_SRC = "lcd/lcd.c";
      //capteur us
      APP_SRC = "sr04/sr04.c";
      //application files.
      APP_SRC = "tpUS_COM.c";

      APP_NAME = "tp_exe";
      CFLAGS  = "-O0"; 
      LDFLAGS = "-Map=tp.map";
      COMPILER = "arm-none-eabi-gcc";
      ASSEMBLER = "arm-none-eabi-as";
      LINKER = "arm-none-eabi-ld";
      COPIER = "arm-none-eabi-objcopy";
      SYSTEM = PYTHON;

      LIBRARY = gpt;
      LIBRARY = stm32;
    };
    SYSTEM_CALL = TRUE;
    MEMMAP = TRUE {
      COMPILER = gcc;
      LINKER = gnu_ld { SCRIPT = "script.ld"; };
      ASSEMBLER = gnu_as;
      MEMORY_PROTECTION = FALSE;
    };
  };
  
  APPMODE std {};

  MESSAGE msg_time {
    // Kind of message . For an internal sending
    // message , it is always SEND_STATIC_INTERNAL .
    MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
      // C type of the variable ( string )
      CDATATYPE = "uint64" ;
    };
  };

  MESSAGE msg_timeChange {
    MESSAGEPROPERTY = RECEIVE_QUEUED_INTERNAL {
      SENDINGMESSAGE = msg_time;
      // The receiver receives 1 message every N from start .
      // So it will receive messages 0, 5, 10, 15, ...
      FILTER = ONEEVERYN {
        PERIOD = 5;
        OFFSET = 0;
      };
      // size of the queue ( number of messages )
      QUEUESIZE = 2;
    };
    // NOTIFICATION may be ACTIVATETASK , SETEVENT or NONE .
    // The notification is performed when a new message arrives
    NOTIFICATION = SETEVENT {
      TASK = displayTask;
      EVENT = ev_timeChange;
    };
  };

  MESSAGE msg_range {
    // Kind of message . For an internal sending
    // message , it is always SEND_STATIC_INTERNAL .
    MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
      // C type of the variable ( string )
      CDATATYPE = "int" ;
    };
  };

  MESSAGE msg_rangeChange {
    MESSAGEPROPERTY = RECEIVE_QUEUED_INTERNAL {
      SENDINGMESSAGE = msg_range;
      // size of the queue ( number of messages )
      QUEUESIZE = 2;
      FILTER = ONEEVERYN {
        PERIOD = 5;
        OFFSET = 0;
      };
    };
    // NOTIFICATION may be ACTIVATETASK , SETEVENT or NONE .
    // The notification is performed when a new message arrives
    NOTIFICATION = SETEVENT {
      TASK = displayTask;
      EVENT = ev_rangeChange;
    };
  };

  EVENT ev_rangeChange {
    MASK = AUTO ;
  };
  
  EVENT ev_timeChange {
    MASK = AUTO ;
  };
  
  EVENT ev_stopTime {
    MASK = AUTO ;
  };
  
  ALARM alTime {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
      TASK = taskTime;
    };
    AUTOSTART = TRUE {
      APPMODE = std;
      ALARMTIME = 1000;
      CYCLETIME = 1000;
    };
  };
  
  ALARM activatePeriodic {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
      TASK = measureTask;
    };
    AUTOSTART = TRUE {
      APPMODE = std;
      ALARMTIME = 100;
      CYCLETIME = 100;
    };
  };
  
  ALARM activateTimeout {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
       TASK = timeoutTask;
    };
    AUTOSTART = FALSE;
  };

  ISR echoISR {
    CATEGORY = 2;
    PRIORITY = 30;
    STACKSIZE = 256;
    SOURCE = EXTI3_IRQ {
      PIN = PE3 {
        PULL = DOWN;
        TRIGGER = BOTH; 
      };
    };
  };

  ISR buttonISR {
    CATEGORY = 2;
    PRIORITY = 30;
    STACKSIZE = 256;
    SOURCE = EXTI0_IRQ {
      PIN = PA0 {
        PULL = DOWN;
        TRIGGER = FALLING; 
      };
    };
  };

  TASK taskTime {
    PRIORITY = 10;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    MESSAGE = msg_timeChange;
  };
  
  TASK displayTask {
    PRIORITY = 1;
    AUTOSTART = TRUE {
      APPMODE = std;
    };
    ACTIVATION = 1;
    SCHEDULE = FULL;
    EVENT = ev_rangeChange;
    EVENT = ev_timeChange;
    EVENT = ev_stopTime;
    MESSAGE = msg_timeChange;
    MESSAGE = msg_rangeChange;
  };
  
  TASK measureTask {
    PRIORITY = 5;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    MESSAGE = msg_rangeChange;
  };
  
  TASK timeoutTask {
    PRIORITY = 8;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    MESSAGE = msg_rangeChange;
  };

};

